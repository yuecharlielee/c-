// https://code.visualstudio.com/docs/cpp/launch-json-reference
{
    "version": "0.2.0",
    "configurations": [
    
    {
        "name": "(gdb) Launch", // 設定名稱，將會在啟動設定的下拉式選單中顯示
        "type": "cppdbg", // 設定型別，cppdbg對應cpptools提供的偵錯功能；可以認為此處只能是cppdbg
        "request": "launch", // 請求設定型別，可以為launch（啟動）或attach（附加）
        "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 將要進行偵錯的程式的路徑
        "args": [], // 程式偵錯時傳遞給程式的命令列引數，一般設為空即可
        "stopAtEntry": false, // 設為true時程式將暫停在程式入口處，相當於在main上打斷點
        "cwd": "${workspaceFolder}", // 偵錯程式時的工作目錄，此為工作區資料夾；改成${fileDirname}可變為檔案所在目錄
        "environment": [], // 環境變數
        "externalConsole": true, // 使用單獨的cmd視窗，與其它IDE一致；為false時使用內建終端
        "internalConsoleOptions": "neverOpen", // 如果不設為neverOpen，偵錯時會跳到「偵錯控制檯」索引標籤，你應該不需要對gdb手動輸命令吧？
        "MIMode": "gdb", // 指定連線的偵錯程式，可以為gdb或lldb。但我沒試過lldb
        "miDebuggerPath": "gdb.exe", // 偵錯程式路徑，Windows下字尾不能省略，Linux下則不要
        "setupCommands": [
            { // 模板自帶，好像可以更好地顯示STL容器的內容，具體作用自行Google
                "description": "Enable pretty-printing for gdb",
                "text": "-enable-pretty-printing",
                "ignoreFailures": false
            }
        ],
        "preLaunchTask": "Compile" // 偵錯對談開始前執行的任務，一般為編譯程式。與tasks.json的label相對應
    }]
}